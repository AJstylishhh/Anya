"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Triggered = void 0;
const path_1 = require("path");
const gifencoder_1 = __importDefault(require("gifencoder"));
const canvas_1 = require("canvas");
const lib_1 = require("../lib");
class Triggered {
    /**
     * Constructs an instance of the triggered class
     * @param {string | Buffer} image Image to be triggered
     */
    constructor(image) {
        this.image = image;
        this.path = (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'triggered.png');
        this.utils = new lib_1.Utils();
        /**
         * Builds the triggered gif
         * @returns {Buffer}
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.image !== 'string' && !Buffer.isBuffer(this.image))
                throw new TypeError(`Image should be of type string or Buffer. Recieved ${typeof this
                    .image}`);
            if (typeof this.image === 'string')
                this.image = yield this.utils.getBuffer(this.image);
            const data = yield (0, canvas_1.loadImage)(this.image);
            const coord1 = [-25, -33, -42, -14];
            const coord2 = [-25, -13, -34, -10];
            const base = yield (0, canvas_1.loadImage)(this.path);
            const encoder = new gifencoder_1.default(base.width, base.width);
            const canvas = (0, canvas_1.createCanvas)(base.width, base.width);
            const ctx = canvas.getContext('2d');
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, base.width, base.width);
            const stream = encoder.createReadStream();
            encoder.start();
            encoder.setRepeat(0);
            encoder.setDelay(50);
            encoder.setQuality(200);
            for (let i = 0; i < 4; i++) {
                this.utils.drawImageWithTint(ctx, data, 'red', coord1[i], coord2[i], 300, 300);
                ctx.drawImage(base, 0, 218, 256, 38);
                encoder.addFrame(ctx);
            }
            encoder.finish();
            return Buffer.concat((yield this.utils.streamToArray(stream)));
        });
    }
}
exports.Triggered = Triggered;
