"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Danger = void 0;
const path_1 = require("path");
const canvas_1 = require("canvas");
const lib_1 = require("../lib");
class Danger {
    /**
     * Constructs an instance of the Danger class
     * @param {string} text Text that should be written
     */
    constructor(text) {
        this.text = text;
        this.paths = {
            font: (0, path_1.join)(__dirname, '..', '..', 'assets', 'fonts', 'Noto-Bold.ttf'),
            image: (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'danger.png')
        };
        this.utils = new lib_1.Utils();
        /**
         * Builds the image
         * @returns {Buffer}
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            (0, canvas_1.registerFont)(this.paths.font, { family: 'Noto', weight: 'bold' });
            const base = yield (0, canvas_1.loadImage)(this.paths.image);
            const canvas = (0, canvas_1.createCanvas)(base.width, base.height);
            const ctx = canvas.getContext('2d');
            ctx.drawImage(base, 0, 0);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'top';
            ctx.font = 'normal bold 60px Noto';
            let fontSize = 60;
            while (ctx.measureText(this.text).width > 2520) {
                fontSize--;
                ctx.font = `normal bold ${fontSize}px Noto`;
            }
            const lines = yield this.utils.wrapText(ctx, this.text.toUpperCase(), 320);
            const topMost = 510 - (((fontSize * lines.length) / 2) + ((20 * (lines.length - 1)) / 2));
            for (let i = 0; i < lines.length; i++) {
                const height = topMost + ((fontSize + 20) * i);
                ctx.fillText(lines[i], base.width / 2, height);
            }
            return canvas.toBuffer();
        });
    }
}
exports.Danger = Danger;
