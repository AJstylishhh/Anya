"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pet = void 0;
const gifencoder_1 = __importDefault(require("gifencoder"));
const lib_1 = require("../lib");
const canvas_1 = require("canvas");
const path_1 = require("path");
class Pet {
    /**
     * Constructs an instance of the Pet class
     * @param {string | Buffer} image Image of the person to pet
     */
    constructor(image) {
        this.image = image;
        this.utils = new lib_1.Utils();
        /**
         * Builds the gif
         * @returns {Buffer}
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.image !== 'string' && !Buffer.isBuffer(this.image))
                throw new TypeError(`The image should be of type string or Buffer. Recieved ${typeof this.image}`);
            if (typeof this.image === 'string')
                this.image = yield this.utils.getBuffer(this.image);
            const data = yield (0, canvas_1.loadImage)(this.image);
            const encoder = new gifencoder_1.default(112, 112);
            const canvas = (0, canvas_1.createCanvas)(112, 112);
            const ctx = canvas.getContext('2d');
            const stream = encoder.createReadStream();
            encoder.start();
            encoder.setRepeat(0);
            encoder.setDelay(200);
            encoder.setQuality(200);
            for (let i = 0; i < 8; i++) {
                const id = `frame_${i.toString().padStart(2, '0')}.png`;
                const frame = yield (0, canvas_1.loadImage)((0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'Pet', id));
                const { x, y, width, height } = this.utils.centerImagePart(data, 75, 75, 27, 38);
                ctx.drawImage(data, x, y, width, height);
                ctx.drawImage(frame, 0, 0);
                encoder.addFrame(ctx);
            }
            encoder.finish();
            return Buffer.concat(yield this.utils.streamToArray(stream));
        });
    }
}
exports.Pet = Pet;
