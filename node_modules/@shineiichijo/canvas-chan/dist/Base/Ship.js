"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ship = void 0;
const canvas_1 = require("canvas");
const path_1 = require("path");
const lib_1 = require("../lib");
class Ship {
    /**
     * Constructs an instance of the ship image
     * @param {IShipOptions[]} profile Array of name and image of the people that you want to ship
     * @param {number} percentage The level of their shipping
     * @param {string} text The text that you want to write at the top of the image
     */
    constructor(profile, percentage, text) {
        this.profile = profile;
        this.percentage = percentage;
        this.text = text;
        this.paths = {
            image: (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'ship.png'),
            font: (0, path_1.join)(__dirname, '..', '..', 'assets', 'fonts', 'Pinky_Cupid.ttf'),
        };
        this.utils = new lib_1.Utils();
        /**
         * Builds the ship image
         * @returns {Buffer}
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            (0, canvas_1.registerFont)(this.paths.font, { family: 'Pinky Cupid' });
            if (this.profile.length <= 1)
                this.profile.push({
                    name: this.profile[0].name,
                    image: this.profile[0].image,
                });
            if ((typeof this.profile[0].image !== 'string' &&
                !Buffer.isBuffer(this.profile[0].image)) ||
                (typeof this.profile[1].image !== 'string' &&
                    !Buffer.isBuffer(this.profile[1].image)))
                throw new TypeError('The image should be of type string or Buffer');
            if (typeof this.profile[0].image === 'string')
                this.profile[0].image = yield this.utils.getBuffer(this.profile[0].image);
            if (typeof this.profile[1].image === 'string')
                this.profile[1].image = yield this.utils.getBuffer(this.profile[1].image);
            const image1 = yield (0, canvas_1.loadImage)(this.profile[0].image);
            const image2 = yield (0, canvas_1.loadImage)(this.profile[1].image);
            const base = yield (0, canvas_1.loadImage)(this.paths.image);
            const canvas = (0, canvas_1.createCanvas)(base.width, base.height);
            const ctx = canvas.getContext('2d');
            let text;
            if (this.percentage === 0 || (this.percentage > 0 && this.percentage < 10))
                text = 'Awful';
            else if (this.percentage >= 10 && this.percentage < 25)
                text = 'Very Bad';
            else if (this.percentage >= 25 && this.percentage < 50)
                text = 'Poor';
            else if (this.percentage >= 50 && this.percentage < 75)
                text = 'Average';
            else if (this.percentage >= 75 && this.percentage < 80)
                text = 'Good';
            else if (this.percentage >= 80 && this.percentage < 90)
                text = 'Great';
            else if (this.percentage >= 90)
                text = 'Amazing';
            ctx.drawImage(image1, 70, 56, 400, 400);
            ctx.drawImage(image2, 730, 56, 400, 400);
            ctx.drawImage(base, 0, 0);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'top';
            ctx.fillStyle = '#ff6c6c';
            ctx.font = '40px Pinky Cupid';
            ctx.fillText('~Compatability Meter~', 600, 15);
            ctx.fillStyle = 'white';
            ctx.fillText(this.profile[0].name, 270, 448);
            ctx.fillText(this.profile[1].name, 930, 448);
            ctx.font = '60px Pinky Cupid';
            ctx.fillStyle = 'red';
            ctx.fillText(`~${this.percentage}%~`, 600, 230);
            ctx.fillText((_a = this.text) !== null && _a !== void 0 ? _a : text, 600, 296);
            ctx.font = '90px Pinky Cupid';
            ctx.fillText(this.percentage > 49 ? '❤️' : '💔', 600, 100);
            return canvas.toBuffer();
        });
    }
}
exports.Ship = Ship;
