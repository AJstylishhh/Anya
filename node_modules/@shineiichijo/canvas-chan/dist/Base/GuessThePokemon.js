"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pokemon = void 0;
const canvas_1 = require("canvas");
const Utils_1 = require("../lib/Utils");
const path_1 = require("path");
class Pokemon {
    /**
     * Constructs an instance of the Guess-The-Pokemon
     * @param {string | number} pokemon The Pokedex ID or name of the pokemon
     * @param {boolean} hide Should be true if you want the pokemon to be hidden and false if you want to show the pokemon
     */
    constructor(pokemon, hide = true) {
        this.pokemon = pokemon;
        this.hide = hide;
        this.utils = new Utils_1.Utils();
        this.paths = {
            images: {
                shown: (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'show.png'),
                hidden: (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'hidden.png'),
            },
            font: (0, path_1.join)(__dirname, '..', '..', 'assets', 'fonts', 'Pokemon_Solid.ttf'),
        };
        /**
         * Builds the image of Guess-The_Pokemon game acording to the given condition
         * @returns {Buffer} The image of the game
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            const query = typeof this.pokemon === 'string'
                ? this.pokemon.toLowerCase()
                : this.pokemon.toString();
            let data;
            try {
                data = yield this.utils.fetch(`https://pokeapi.co/api/v2/pokemon/${query}`);
            }
            catch (error) {
                throw new Error(`Invalid Pokemon name or id`);
            }
            const { name, id } = data;
            if (this.hide)
                return yield this.createImage({
                    name,
                    image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`,
                });
            else
                return yield this.createImage({
                    name,
                    image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`,
                });
        });
        this.createImage = (pokemon) => __awaiter(this, void 0, void 0, function* () {
            const file = this.hide ? 'hidden' : 'shown';
            const bg = yield (0, canvas_1.loadImage)(this.paths.images[file]);
            const pkmn = yield (0, canvas_1.loadImage)(yield this.utils.getBuffer(pokemon.image));
            const canvas = (0, canvas_1.createCanvas)(bg.width, bg.height);
            const ctx = canvas.getContext('2d');
            ctx.drawImage(bg, 0, 0);
            if (this.hide) {
                const silhouetteCanvas = (0, canvas_1.createCanvas)(pkmn.width, pkmn.height);
                const silhouetteCtx = silhouetteCanvas.getContext('2d');
                silhouetteCtx.drawImage(pkmn, 0, 0);
                this.utils.silhouette(silhouetteCtx, 0, 0, pkmn.width, pkmn.height);
                ctx.drawImage(silhouetteCanvas, 30, 39, 200, 200);
            }
            else {
                ctx.drawImage(pkmn, 30, 39, 200, 200);
                ctx.font = this.paths.font;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'bottom';
                ctx.lineWidth = 8;
                ctx.strokeStyle = '#3c5aa6';
                ctx.strokeText(this.utils.capitalize(pokemon.name), 362, 158, 240);
                ctx.fillStyle = '#ffcb05';
                ctx.fillText(this.utils.capitalize(pokemon.name), 362, 158, 240);
            }
            return canvas.toBuffer();
        });
    }
}
exports.Pokemon = Pokemon;
