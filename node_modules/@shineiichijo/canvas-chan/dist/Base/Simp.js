"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Simp = void 0;
const path_1 = require("path");
const canvas_1 = require("canvas");
const Utils_1 = require("../lib/Utils");
class Simp {
    /**
     * Constucts an instance of the Simp class
     * @param {string | Buffer} image The image that you want to mark as a simp
     */
    constructor(image) {
        this.image = image;
        this.path = (0, path_1.join)(__dirname, '..', '..', 'assets', 'images', 'simp.png');
        this.utils = new Utils_1.Utils();
        /**
         * Builds the simp image
         * @returns {Buffer}
         */
        this.build = () => __awaiter(this, void 0, void 0, function* () {
            const base = yield (0, canvas_1.loadImage)(this.path);
            if (typeof this.image !== 'string' && !Buffer.isBuffer(this.image))
                throw new TypeError(`The image should be of type string or instance of Buffer. Recieved ${typeof this
                    .image}`);
            if (typeof this.image === 'string')
                this.image = yield this.utils.getBuffer(this.image);
            const data = yield (0, canvas_1.loadImage)(this.image);
            const canvas = (0, canvas_1.createCanvas)(data.width, data.height);
            const ctx = canvas.getContext('2d');
            ctx.drawImage(data, 0, 0);
            const { x, y, width, height } = yield this.utils.centerImage(base, data);
            ctx.drawImage(base, x, y, width, height);
            return canvas.toBuffer();
        });
    }
}
exports.Simp = Simp;
